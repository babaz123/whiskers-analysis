function [whisk_pow,conditions,all_combos, n_trials] = whisker_freq(data_table,varargin)

% defaults parameters
params = struct(...
    'CNO'                , [false true],...
    'postlesion_ION'     , [false true],...
    'essai_tente'        , [      true],...
    'reward_zone_width'  , [        30],...
    'essai_interessai'   , [      true],...
    'hold_time'          , 1           ,...
    'reussite'           , [      true],...
    ...
    'wind'         , 400,  ... % in ms, length of Hamming window
    'noverlap'     , 75,   ... % window overlap, in % of 'wind'
    'nlog'         , false,... % log normalize
    'plot_flag'    , true, ...
    ...
    'fs'           ,1000,...
    'whisk_band'   ,[5 12]...
    );
%    'low_band'     ,[0 5],...
%    'med_band'     ,[5 12],...
%    'hi_band'      ,[15 30]...
%     );

params = parse_input_params(params,varargin);

conditions = {'CNO','postlesion_ION','essai_tente','reward_zone_width','essai/interessai','hold_time','reussite'};
condition_values = { params.CNO, params.postlesion_ION, params.essai_tente, params.reward_zone_width,...
    params.essai_interessai, params.hold_time, params.reussite};


% stft params
wind_pts  = floor(params.wind*params.fs/1000);
nover_pts = floor(wind_pts*params.noverlap/100);
if params.nlog
    nfft = logspace(log10(1),log10(30),256);
else
    nfft = 15*(1:128)/128;
end
%highpass filter 1 Hz
[bh,ah] = butter(4, 1*2/params.fs, 'high');

%identify all possible combinations of condition values
num_cond_vals = cellfun(@numel,condition_values);
num_combo     = prod(num_cond_vals);
all_combos    = nan(num_combo,length(conditions));
all_indexes   = cell(num_combo,1);
n_trials      = zeros(num_combo,1);

% variables to store band power

whisk_pow_all = cell(num_combo,1);
whisk_pow_hold = cell(num_combo,1);
% low_f = nan(num_combo,1);
% med_f = nan(num_combo,1);
% hi_f  = nan(num_combo,1);
% low_f_lastsec = nan(num_combo,1);
% med_f_lastsec = nan(num_combo,1);
% hi_f_lastsec  = nan(num_combo,1);

for cond = 1:length(conditions)
    cond_pattern       = repmat(condition_values{cond},prod(num_cond_vals(1:cond-1)),1);
    all_combos(:,cond) = repmat(cond_pattern(:),num_combo/numel(cond_pattern),1);
end

% find table indexes for all possible combinations of condition values
for combo = 1:num_combo
    relevant_trials = 1:size(data_table,2);
    for cond = 1:length(conditions)
        relevant_trials = relevant_trials(cell2mat(data_table{conditions(cond),relevant_trials})==all_combos(combo,cond));
    end
    all_indexes{combo} = relevant_trials;
    n_trials(combo)    = length(relevant_trials);
end

if params.plot_flag
    fh=figure;
    set(gcf,'units','normalized','position',[.25 .25 .5 .5]);
    quit_button = uicontrol('units','normalized','Position',[.1 .01 .1 .05],'parent',fh,'style','pushbutton','string','Stop plots','callback',@quit_button_callback);
    quit_button.UserData = 0;
    continue_button = uicontrol('units','normalized','Position', [.75 .01 .1 .05], 'String', 'Continue', 'Callback', 'uiresume(gcbf)');
end

% perform analyses trial by trial
for combo = 1:num_combo
    relevant_trials = all_indexes{combo};
    for trial = 1:length(relevant_trials)
        whisker_pos = data_table{{'position_vibrisse'},relevant_trials(trial)}{:};
        
        % correct for missing points, highpass and and smooth
        timeframe = (0:numel(whisker_pos)-1)*(1/params.fs);
        inn = ~isnan(whisker_pos);
        whisker_filt = interp1(timeframe(inn),whisker_pos(inn),timeframe,'spline');
        whisker_filt = smooth(filtfilt(bh,ah,whisker_filt));
        
        %calculate spectrogram
        %         [s,f,t,p] = spectrogram(whisker_pos,wind_pts,nover_pts,nfft,params.fs);
        %         [s,f,t,p] = spectrogram(whisker_pos,'reassigned',wind_pts,nover_pts,nfft,params.fs);
        %         [s,f,t,p] = spectrogram(detrend(whisker_pos,'constant'),'reassigned',wind_pts,nover_pts,nfft,params.fs);
        [s,f,t,p] = spectrogram(whisker_filt,wind_pts,nover_pts,nfft,params.fs);
        
        whisk_pow_all{combo,trial}  = mean(mean(p(f>=params.whisk_band(1) & f<=params.whisk_band(2),2:end))); % exclude first bin
        whisk_pow_hold{combo,trial} = mean(mean(p(f>=params.whisk_band(1) & f<=params.whisk_band(2),t>=timeframe(end)-1)));
%         low_f(combo,trial)         = mean(mean(abs(s(f>=params.low_band(1) & f<=params.low_band(2),:))));
%         low_f_lastsec(combo,trial) = mean(mean(abs(s(f>=params.low_band(1) & f<=params.low_band(2),t>=timeframe(end)-1))));
%         med_f(combo,trial)         = mean(mean(abs(s(f>=params.med_band(1) & f<=params.med_band(2),:))));
%         med_f_lastsec(combo,trial) = mean(mean(abs(s(f>=params.med_band(1) & f<=params.med_band(2),t>=timeframe(end)-1))));
%         hi_f(combo,trial)          = mean(mean(abs(s(f>=params.hi_band(1)  & f<=params.hi_band(2),:))));
%         hi_f_lastsec(combo,trial)  = mean(mean(abs(s(f>=params.hi_band(1)  & f<=params.hi_band(2),t>=timeframe(end)-1))));


        if params.plot_flag && ~quit_button.UserData
            subplot(4,1,1); %plot whisker_pos
            plot(timeframe,whisker_pos,'b','linewidth',2);
            hold on;
            plot( [timeframe(1) timeframe(end)],[100 130;100 130],'k-','linewidth',2);
            hold off;
            title('original whisker pos signal');
            axis tight;
            pretty_fig;
            
            hw =subplot(4,1,2);%plot whisker_filt
            plot(timeframe,whisker_filt,'r','linewidth',2);
            title('processed whisker pos signal');
            axis tight;
            pretty_fig;
            
            hs = subplot(4,1,3); %plot spectrogram
            spectrogram(whisker_filt,wind_pts,nover_pts,nfft,params.fs,'yaxis');
            % resize to same width as whisker_pos plot
            pw_pos = get(hw,'position');
            ps_pos = get(hs,'position');
            ps_pos(3:4) = pw_pos(3:4);
            set(hs,'position',ps_pos);
            title('spectrogram');
            pretty_fig;
            
            hd = subplot(4,1,4); %plot psd
            cla;
            y = 15/128:15/128:15;
            hsurf=surface(t,y,p);
            axis tight
            colorbar('location','eastoutside');
            pd_pos = get(hd,'position');
            pd_pos(3:4) = pw_pos(3:4);
            set(hd,'position',pd_pos);
            title('Power spectral density');
            pretty_fig;
            set(hsurf,'edgecolor','none');
            uiwait(fh);
        end
        
    end
end

close(gcf);
whisk_pow = struct('all'    , {whisk_pow_all},...
                   'hold'   , {whisk_pow_hold});

% freq_pow = struct('low_band'      ,low_f,...
%     'med_band'      ,med_f,...
%     'hi_band'       ,hi_f,...
%     'low_band_hold' ,low_f_lastsec,...
%     'med_band_hold' ,med_f_lastsec,...
%     'hi_band_hold'  ,hi_f_lastsec);

end
%% Todo Michael:
% 1- transpose the table to allow direct  variable access using '.' (e.g. table.duree)
% 2- Use variable names that are short, but informative (e.g. jui-2-6_allsessions, not 'table' or 'experiment.m').
% 3- do not use the '/' character in variable names (e.g. 'essai/interessai')
% 4- ecrire des commentaires/instructions au début de la fonction


function quit_button_callback(source,callbackdata)
set(source,'UserData',1);
uiresume(gcbf);
end